version: '3.8'

services:
  api:
    build: .
    container_name: accounting-api-prod
    restart: always
    volumes:
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    env_file:
      - .env.prod
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - S3_ENDPOINT_URL=http://minio:9000
    depends_on:
      - db
      - minio
    networks:
      - accounting-network
    # Production command without reload
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4

  db:
    image: postgres:14-alpine
    container_name: accounting-db-prod
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env.prod
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    expose:
      - "5432"  # Only expose to internal network
    networks:
      - accounting-network
      
  # For production, consider using distributed MinIO with erasure coding
  # See https://min.io/docs/minio/linux/operations/install-deploy-manage/deploy-minio-multi-node-multi-drive.html
  minio:
    image: quay.io/minio/minio
    container_name: minio-prod
    restart: always
    volumes:
      - minio_data:/data
    expose:
      - "9000"
      - "9001"
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY:-minioadmin}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_KEY:-minioadminStrongPass}
    networks:
      - accounting-network
    command: server /data --console-address ":9001"

networks:
  accounting-network:
    driver: bridge

volumes:
  postgres_data:
  minio_data: